// DO NOT EDIT THIS FILE! Generated from WifiConfig.proto

import Foundation
import ProtoBLEiOS
import CoreBluetooth

let WifiSetupService_UUID = CBUUID(string: "e2428c7a-abe6-4b13-a9e4-c3ce154d53c5")

let GETWIRELESSNETWORKS_PARAM_UUID = CBUUID(string: "777d704a-fb59-4d40-8466-83a32609e346")
let GETWIRELESSNETWORKS_RETURN_UUID = CBUUID(string: "46571b2e-49d3-4e07-b47f-eea0a140d1de")
let JOIN_PARAM_UUID = CBUUID(string: "39479211-2140-45b3-9d6c-a644b79dcb01")
let JOIN_RETURN_UUID = CBUUID(string: "4d2f2bcc-348a-423c-b4dc-03b7f94b0c7c")
let DISCONNECT_PARAM_UUID = CBUUID(string: "5629f451-6e2f-466c-8737-a041820e5e16")
let DISCONNECT_RETURN_UUID = CBUUID(string: "8382d57f-0186-44be-aa09-bfb773b5a99f")
let AUTHENTICATE_PARAM_UUID = CBUUID(string: "32f67978-7f15-4eea-bc31-cc1ace51e301")
let AUTHENTICATE_RETURN_UUID = CBUUID(string: "c139ab76-cfbe-4031-a2d2-08f0aeeeb6c5")
let CHANGEOPERATIONMODE_PARAM_UUID = CBUUID(string: "72dacfde-5e04-4a03-ae94-f2fbcb134b4e")
let CHANGEOPERATIONMODE_RETURN_UUID = CBUUID(string: "9b500504-ab1a-4a3e-908f-97aca2a33d4d")

protocol WifiSetupDelegate: ProtoBleServiceDelegate {
    func getWirelessNetworksDidComplete(_ scan: Scan)
    func getWirelessNetworksMessageProgress(current: Int, total: Int)

    func joinDidComplete(_ joinResult: JoinResult)
    func joinMessageProgress(current: Int, total: Int)

    func disconnectDidComplete(_ disconnectResult: DisconnectResult)
    func disconnectMessageProgress(current: Int, total: Int)

    func authenticateDidComplete(_ authenticateResult: AuthenticateResult)
    func authenticateMessageProgress(current: Int, total: Int)

    func changeOperationModeDidComplete(_ operationModeResult: OperationModeResult)
    func changeOperationModeMessageProgress(current: Int, total: Int)

}

class WifiSetupBleService: ProtoBleServiceDelegate {
    let bleService: ProtoBleService
    let clientDelegate: WifiSetupDelegate

    let getWirelessNetworksRpc: ProtoBleRpc
    class GetWirelessNetworksRpcHandler: ProtoBleRpcDelegate {
        let delegate: WifiSetupDelegate
        init(_ delegate: WifiSetupDelegate) { 
            self.delegate = delegate
        }

        func messageWasReceived(_ data: Data) {
            if let x = try? Scan(serializedData: data) {
                 delegate.getWirelessNetworksDidComplete(x)
            }
            else {
                 delegate.bleDidError(ProtoBleError(kind: .invalidMessage, message: "Received InvalidScan Message."))
            }
        }
        func messageProgress(current:Int, total:Int) {
            delegate.getWirelessNetworksMessageProgress(current: current, total: total)
        }
        func rpcDidError(_ err: Error) {
            self.delegate.bleDidError(err)
        }
    }

    let joinRpc: ProtoBleRpc
    class JoinRpcHandler: ProtoBleRpcDelegate {
        let delegate: WifiSetupDelegate
        init(_ delegate: WifiSetupDelegate) { 
            self.delegate = delegate
        }

        func messageWasReceived(_ data: Data) {
            if let x = try? JoinResult(serializedData: data) {
                 delegate.joinDidComplete(x)
            }
            else {
                 delegate.bleDidError(ProtoBleError(kind: .invalidMessage, message: "Received InvalidJoinResult Message."))
            }
        }
        func messageProgress(current:Int, total:Int) {
            delegate.joinMessageProgress(current: current, total: total)
        }
        func rpcDidError(_ err: Error) {
            self.delegate.bleDidError(err)
        }
    }

    let disconnectRpc: ProtoBleRpc
    class DisconnectRpcHandler: ProtoBleRpcDelegate {
        let delegate: WifiSetupDelegate
        init(_ delegate: WifiSetupDelegate) { 
            self.delegate = delegate
        }

        func messageWasReceived(_ data: Data) {
            if let x = try? DisconnectResult(serializedData: data) {
                 delegate.disconnectDidComplete(x)
            }
            else {
                 delegate.bleDidError(ProtoBleError(kind: .invalidMessage, message: "Received InvalidDisconnectResult Message."))
            }
        }
        func messageProgress(current:Int, total:Int) {
            delegate.disconnectMessageProgress(current: current, total: total)
        }
        func rpcDidError(_ err: Error) {
            self.delegate.bleDidError(err)
        }
    }

    let authenticateRpc: ProtoBleRpc
    class AuthenticateRpcHandler: ProtoBleRpcDelegate {
        let delegate: WifiSetupDelegate
        init(_ delegate: WifiSetupDelegate) { 
            self.delegate = delegate
        }

        func messageWasReceived(_ data: Data) {
            if let x = try? AuthenticateResult(serializedData: data) {
                 delegate.authenticateDidComplete(x)
            }
            else {
                 delegate.bleDidError(ProtoBleError(kind: .invalidMessage, message: "Received InvalidAuthenticateResult Message."))
            }
        }
        func messageProgress(current:Int, total:Int) {
            delegate.authenticateMessageProgress(current: current, total: total)
        }
        func rpcDidError(_ err: Error) {
            self.delegate.bleDidError(err)
        }
    }

    let changeOperationModeRpc: ProtoBleRpc
    class ChangeOperationModeRpcHandler: ProtoBleRpcDelegate {
        let delegate: WifiSetupDelegate
        init(_ delegate: WifiSetupDelegate) { 
            self.delegate = delegate
        }

        func messageWasReceived(_ data: Data) {
            if let x = try? OperationModeResult(serializedData: data) {
                 delegate.changeOperationModeDidComplete(x)
            }
            else {
                 delegate.bleDidError(ProtoBleError(kind: .invalidMessage, message: "Received InvalidOperationModeResult Message."))
            }
        }
        func messageProgress(current:Int, total:Int) {
            delegate.changeOperationModeMessageProgress(current: current, total: total)
        }
        func rpcDidError(_ err: Error) {
            self.delegate.bleDidError(err)
        }
    }

    public init(delegate: WifiSetupDelegate) {
        clientDelegate = delegate
        let getWirelessNetworksRpcHandler = GetWirelessNetworksRpcHandler(delegate)
        getWirelessNetworksRpc = ProtoBleRpc(name: "getWirelessNetworks", paramUuid: GETWIRELESSNETWORKS_PARAM_UUID, resultUuid: GETWIRELESSNETWORKS_RETURN_UUID, rpcDelegate: getWirelessNetworksRpcHandler)
        let joinRpcHandler = JoinRpcHandler(delegate)
        joinRpc = ProtoBleRpc(name: "join", paramUuid: JOIN_PARAM_UUID, resultUuid: JOIN_RETURN_UUID, rpcDelegate: joinRpcHandler)
        let disconnectRpcHandler = DisconnectRpcHandler(delegate)
        disconnectRpc = ProtoBleRpc(name: "disconnect", paramUuid: DISCONNECT_PARAM_UUID, resultUuid: DISCONNECT_RETURN_UUID, rpcDelegate: disconnectRpcHandler)
        let authenticateRpcHandler = AuthenticateRpcHandler(delegate)
        authenticateRpc = ProtoBleRpc(name: "authenticate", paramUuid: AUTHENTICATE_PARAM_UUID, resultUuid: AUTHENTICATE_RETURN_UUID, rpcDelegate: authenticateRpcHandler)
        let changeOperationModeRpcHandler = ChangeOperationModeRpcHandler(delegate)
        changeOperationModeRpc = ProtoBleRpc(name: "changeOperationMode", paramUuid: CHANGEOPERATIONMODE_PARAM_UUID, resultUuid: CHANGEOPERATIONMODE_RETURN_UUID, rpcDelegate: changeOperationModeRpcHandler)
        bleService = ProtoBleService(serviceUuid: WifiSetupService_UUID, rpc: [getWirelessNetworksRpc,joinRpc,disconnectRpc,authenticateRpc,changeOperationModeRpc])
        bleService.serviceDelegate = self
    }

    func getWirelessNetworks(scanRequest: ScanRequest) throws {
        try getWirelessNetworksRpc.writeValue(data: scanRequest.serializedData())
    }

    func join(joinRequest: JoinRequest) throws {
        try joinRpc.writeValue(data: joinRequest.serializedData())
    }

    func disconnect(disconnectRequest: DisconnectRequest) throws {
        try disconnectRpc.writeValue(data: disconnectRequest.serializedData())
    }

    func authenticate(authenticateRequest: AuthenticateRequest) throws {
        try authenticateRpc.writeValue(data: authenticateRequest.serializedData())
    }

    func changeOperationMode(operationModeRequest: OperationModeRequest) throws {
        try changeOperationModeRpc.writeValue(data: operationModeRequest.serializedData())
    }

    func bleDidDiscoverCharacteristics() {
        clientDelegate.bleDidDiscoverCharacteristics()
    }
    func bleDidError(_ error: Error) {
        clientDelegate.bleDidError(error);
    }

}
