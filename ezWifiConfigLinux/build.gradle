import org.redline_rpm.header.Flags

buildscript {
    repositories {
        mavenCentral()
        jcenter()
    }
    dependencies {
        classpath 'com.google.protobuf:protobuf-gradle-plugin:0.8.4'
        classpath 'com.netflix.nebula:gradle-ospackage-plugin:7.6.2'
    }
}

apply plugin: 'java-library'
apply plugin: 'application'
apply plugin: 'com.google.protobuf'
apply plugin: 'idea'
apply plugin: 'maven'
apply plugin: 'nebula.deb'

group 'com.electrazoom.network'
version '1.0-SNAPSHOT'

//sourceCompatibility = 1.8

repositories {
    mavenLocal()
    mavenCentral()
}

// for stand-alone server install files
mainClassName = 'com.electrazoom.remote.WifiConfigServer'

protobuf {
    protoc {
        // This doesn't work on Raspberry Pi because there is no protoc compiled for arm in mavencentral.
        // artifact = 'com.google.protobuf:protoc:3.5.1-1'
        // may need to specify path if protoc isn't in the usual place.
        path = '/usr/bin/protoc'
    }
    plugins {
        server {
            // :~/tools$ unzip /home/geoff/Projects/libaries/proto-ble/codegen/build/distributions/codegen-1.0-SNAPSHOT.zip
            path = "${System.properties['user.home']}/tools/CodeGen-1.0-SNAPSHOT/bin/LinuxServerPlugin"
        }
    }

    generateProtoTasks {
        all().each { task ->
            task.plugins {
                server {}
            }
            task.builtins {
                remove java // common java classes already built in the :example-api-hello
            }
        }
    }
}
sourceSets {
    main {
        proto {
            // srcDir "${project(':ezNetConfigAPI').projectDir}/src/main/proto"
            srcDir "${project(':ezWifiConfigAPI').projectDir}/src/main/proto"
        }
    }
}

idea {
    module {
        sourceDirs += file("${buildDir}/generated/source/proto/main/java")
    }
}


dependencies {
    api project(':ezWifiConfigAPI')
    api group: 'com.google.protobuf', name: 'protobuf-java', version: '3.5.1'
    implementation 'com.electrazoom:CodeGen:1.0-SNAPSHOT'

    implementation 'com.electrazoom:LibProtoBLELinux:0.1-SNAPSHOT'
    implementation 'com.electrazoom:LibValueMsg:0.1-SNAPSHOT'
    implementation fileTree(dir: 'libs', include: ['*.jar'])
    implementation 'ch.qos.logback:logback-classic:1.0.13'

    testCompile group: 'junit', name: 'junit', version: '4.12'
}

jar {
    manifest {
        attributes('Implementation-Title': project.name,
                'Implementation-Version': project.version)
    }
}

task (runNetworkingExample, dependsOn: 'classes', type: JavaExec) {
    group = 'verification'
    // replace the following with your network to test
    args = ['IHOP Pancakes']
    main = 'com.ezsmartdevices.sample.Main'
    systemProperty "java.library.path", "/usr/lib/jni"
    classpath = sourceSets.test.runtimeClasspath
}

task (runWifiSetupServer, dependsOn: 'classes', type: JavaExec) {
    group = 'build'
    // replace the following with your network to test
    main = 'com.ezsmartdevices.remote.WifiConfigServer'
    systemProperty "java.library.path", "/usr/lib/jni"
    classpath = sourceSets.main.runtimeClasspath
}

task ezWifiConfigDeb(dependsOn: installDist, type: Deb) {
    group = "distribution"
    description = 'Build Debian .deb file'
    release '1'
    packageName 'ezwificonfig'
    os = LINUX
    user = 'ezwificonfig'
    permissionGroup = 'ezwificonfig'
    requires('openjdk-11-jre-headless', '11.0.3+7-5', Flags.GREATER|Flags.EQUAL)
    requires('libdbus-java', '2.8-9', Flags.GREATER|Flags.EQUAL)
    requires('libunixsocket-java', '0.8.1-1', (Flags.GREATER|Flags.EQUAL))
    requires('network-manager', '1.14.6-2', (Flags.GREATER|Flags.EQUAL))

    into '/opt/ezWifiConfig'

    from("${buildDir}/install/ezWifiConfigLinux/lib") {
        into 'lib'
        fileMode 0755
    }

    from("${buildDir}/install/ezWifiConfigLinux/bin") {
        into 'bin'
        fileMode 0755
    }

    from("${projectDir}/src/main/scripts") {
        into 'scripts'
        fileMode 0755
    }

    preInstallFile(new File("${projectDir}/src/main/scripts/preInstall.sh"))
    postInstallFile(new File("${projectDir}/src/main/scripts/installService.sh"))
    preUninstall(new File("${projectDir}/src/main/scripts/removeService.sh"))
}